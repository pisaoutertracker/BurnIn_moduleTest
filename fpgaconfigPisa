#!/usr/bin/env python3
import sys
import argparse
from databaseTools import updateFirmwareVersionInFC7OT


xmlTemplate="PS_Module_v2p1.xml"
outFilePy="PS_Module_settings_autogenerated_for_fpgaconfigPisa.py"
outFileXml="ModuleTest_settings_for_fpgaconfigPisa.xml"
edgeSelect="0"
opticalGroups="0"
hybrids="0"
lpGBTfile="lpGBT_v1_PS.txt"
strips=[0,1,2,3,4,5,6,7]
pixels=[8,9,10,11,12,13,14,15]

ph2ACFversion = "ph2_acf_v6-10"
def main():
    print("fpgaconfigPisa is a script that will run fpgaconfig from docker (%s), it will create a temporary xml file (%s) pointing to the FC7 board passed as first argument, then it will upload to the database that you installed that firmware in the board. Example usage:" % (ph2ACFversion, xmlTemplate))
    print("    fpgaconfigPisa fc7ot3 -l # to list images on SD card")
    print("    fpgaconfigPisa fc7ot3 -i ps6m10gcic2l12octal8dio5vMR105 # to load image from SD card to FPGA")
    print()

    # The unsupported map lists options that are not allowed in fpgaconfigPisa.
    # These options will trigger an error message and terminate the script if used.
    # Ensure that only supported options are passed to the script.
    unsupported = {
        "-c"    : "Option '-c' is not supported in fpgaconfigPisa. fpgaconfigPisa will create automatically the required .xml file.",
        "--config": "Option '--config' is not supported in fpgaconfigPisa. fpgaconfigPisa will create automatically the required .xml file.",
        "-b"    : "Option '-b' is not supported in fpgaconfigPisa. fpgaconfigPisa will create automatically the required .xml file, with only 1 FC7 board in 0.",
        "--board": "Option '--board' is not supported in fpgaconfigPisa. fpgaconfigPisa will create automatically the required .xml file, with only 1 FC7 board in 0."
    }

    # Check for truly unsupported options
    for arg in sys.argv[1:]:
        if arg in unsupported:
            print(f"Error: {unsupported[arg]}")
            sys.exit(1)

    if len(sys.argv) < 2:
        print("Error: You must provide at least the FC7 board name as the first argument.")
        sys.exit(1)
    
    if sys.argv[1].startswith("-"):
        print("Error: The first argument must be the FC7 board name, not an option.")
        sys.exit(1)

    board = sys.argv[1]

    # We'll create an argument parser that includes file, run, last, calibration, message, session, etc.
    parser = argparse.ArgumentParser(
        description="Usage: %(prog)s -f <xmlFile> -c <value> [options]"
    )

    from makeXml import makeXml, makeXmlPyConfig

    xmlConfig = makeXmlPyConfig(board, opticalGroups, hybrids, strips, pixels, lpGBTfile, edgeSelect, outFilePy, Nevents=1000)
    print(xmlConfig)

    makeXml(outFileXml, xmlConfig, xmlTemplate)
    from shellCommands import fpgaconfigNew

    options = "--config %s --board 0 " % (outFileXml)
    options += " ".join(sys.argv[2:])
    ## Pass all arguments to options
    

    print("Options for fpgaconfigNew:", options)

    output = fpgaconfigNew(options, ph2ACFversion)
    startLineSuccess = "Firmware image: "
    endLineSuccess = " loaded on FPGA"
    firmwareImage = "unknown"
    timestamp = "unknown"
    for line in output.stdout.decode().split("\n"):
        if startLineSuccess in line and endLineSuccess in line:
            firmwareImage = line.split(startLineSuccess)[1].split(endLineSuccess)[0].strip()
            print("Firmware Image: '%s'" % firmwareImage)
        if ": |" in line:
            timestamp = line.split(": |")[0]
    if firmwareImage != "unknown":
        print("Success: Firmware image '%s' has been loaded onto the FPGA of board '%s'." % (firmwareImage, board))
    else:
        print("Error: Could not determine the firmware image loaded onto the FPGA. Please check the fpgaconfig output above for details.")
        print("Setting unknown firmware version in database.")
    out = updateFirmwareVersionInFC7OT(board, firmwareImage, timestamp)
    if out.status_code == 200:
        #print("Database has been updated with the new firmware information.")
        pass 
    else:     
        print("ERROR [fpgaconfigPisa]: Could not update the database with the new firmware information. Please check the database connection and board name.")
        print("Response:", out.text)
        sys.exit(1)

    print()
    if firmwareImage == "unknown":
        print("ERROR [fpgaconfigPisa]: The firmware upload failed.")
        print()
        sys.exit(1)
    else:
        print(f"Firmware '{firmwareImage}' successfully uploaded to board '{board}' and database updated.")
        print()
    

if __name__ == "__main__":
    main()
