#!/usr/bin/env python3
import sys
import os
import argparse
import subprocess

xmlTemplate="PS_Module_v2p1.xml"
outFilePy="PS_Module_settings_autogenerated_for_fpgaconfigPisa.py"
outFileXml="ModuleTest_settings_for_fpgaconfigPisa.xml"
edgeSelect="0"
board="0"
opticalGroups="0"
hybrids="0"
lpGBTfile="lpGBT_v1_PS.txt"
strips=[0,1,2,3,4,5,6,7]
pixels=[8,9,10,11,12,13,14,15]

ph2ACFversion = "ph2_acf_v6-10"
def main():
    print("fpgaconfigPisa is a script that will run fpgaconfig from docker (%s), it will create a temporary xml file (%s) pointing to the FC7 board passed as first argument, then it will upload to the database that you installed that firmware in the board. Example usage:" % (ph2ACFversion, xmlTemplate))
    print("    fpgaconfigPisa fc7ot3 -l # to list images on SD card")
    print("    fpgaconfigPisa fc7ot3 -i ps6m10gcic2l12octal8dio5vMR105 # to load image from SD card to FPGA")
    print()

    # We'll revise the unsupported map: the script used to claim
    # that -l, -r, etc. are unsupported. Now, we DO support them,
    # so let's just remove them from the immediate check and handle them properly.
    # If you still want to keep them as previously done for other flags, you can.
    unsupported = {
        "-c"    : "Option '-c' is not supported. fpgaconfigPisa will run creating automatically the required .xml file.",
        "--config": "Option '--config' is not supported. fpgaconfigPisa will run creating automatically the required .xml file.",
        "-b"    : "Option '-b' is not supported. fpgaconfigPisa will run creating automatically the required .xml file, with only 1 FC7 board.",
        "--board": "Option '--board' is not supported. fpgaconfigPisa will run creating automatically the required .xml file, with only 1 FC7 board."
    }

    # Check for truly unsupported options
    for arg in sys.argv[1:]:
        if arg in unsupported:
            print(f"Error: {unsupported[arg]}")
            sys.exit(1)

    if len(sys.argv) < 2:
        print("Error: You must provide at least the FC7 board name as the first argument.")
        sys.exit(1)
    
    if sys.argv[1].startswith("-"):
        print("Error: The first argument must be the FC7 board name, not an option.")
        sys.exit(1)

    # We'll create an argument parser that includes file, run, last, calibration, message, session, etc.
    parser = argparse.ArgumentParser(
        description="Usage: %(prog)s -f <xmlFile> -c <value> [options]"
    )

    # # We'll put file, run, and last in a mutually exclusive group,
    # # but in your original snippet -f is required. We'll no longer enforce
    # # -f as always required because -l or -r might be used instead.
    # group = parser.add_mutually_exclusive_group(required=True)
    # group.add_argument("-f", "--file", type=str, dest="fpgaBSFile", required=False,
    #                    help="Local FPGA Bitstream file (*.mcs format for GLIB or *.bit/*.bin format for CTA boards)")

    # group.add_argument("-l", "--list", action="store_true", required=False,
    #                    help="Print the list of available firmware images on SD card (works only with CTA boards)")

    # group.add_argument("-d", "--delete", type=str, dest="FirmwareImageToDelete", required=False,
    #                    help="Delete a firmware image on SD card (works only with CTA boards)")

    # parser.add_argument("--download", "-o", type=str, dest="fpgaBSFile", required=False,
    #                     help="Download an FPGA configuration from SD card to file (only for CTA boards)")

    # parser.add_argument("-i", "--image", type=str, dest="fpgaBSFile", required=False,
    #                     help="Without -f: load image from SD card to FPGA\nWith    -f: name of image written to SD card\n-f specifies the source filename")

    
    # args = parser.parse_args()
    # print(args)

    from makeXml import makeXml, makeXmlPyConfig

    xmlConfig = makeXmlPyConfig(board, opticalGroups, hybrids, strips, pixels, lpGBTfile, edgeSelect, outFilePy, Nevents=1000)
    print(xmlConfig)

    makeXml(outFileXml, xmlConfig, xmlTemplate)
    from shellCommands import fpgaconfigNew

    options = "--config %s --board 0 " % (outFileXml)
    options += " ".join(sys.argv[2:])
    ## Pass all arguments to options
    

    print("Options for fpgaconfigNew:", options)

    fpgaconfigNew(options, ph2ACFversion)

    if args.last or args.run is not None:
        # We are using the run-based approach
        if args.last:
            # Read last run from RunNumbers.dat
            run_numbers_path = os.path.join(ph2acf_base_dir, "RunNumbers.dat")
            if not os.path.isfile(run_numbers_path):
                print(f"Error: '{run_numbers_path}' does not exist. Cannot use --last.")
                sys.exit(1)
            with open(run_numbers_path, "r") as run_file:
                lines = [ln.strip() for ln in run_file.readlines() if ln.strip()]
                if not lines:
                    print("Error: RunNumbers.dat is empty. Cannot use --last.")
                    sys.exit(1)
                last_run_str = lines[-1]
                try:
                    last_run = int(last_run_str)
                except ValueError:
                    print(f"Error: The last line in RunNumbers.dat ('{last_run_str}') is not an integer.")
                    sys.exit(1)
            run_number = last_run
        else:
            # We have a specific run
            run_number = args.run

        # Identify the directory
        run_dir = os.path.join(ph2acf_base_dir, "Results", "Run_"+str(run_number))
        if not os.path.isdir(run_dir):
            print(f"Error: Run directory '{run_dir}' does not exist.")
            sys.exit(1)

        config_path = os.path.join(run_dir, "Configuration.xml")
        if not os.path.isfile(config_path):
            print(f"Error: Configuration.xml not found in run directory '{run_dir}'.")
            sys.exit(1)

        xml_file_to_use = config_path

    else:
        # user used -f/--file
        if not os.path.isfile(args.xmlFile):
            print(f"Error: Specified file '{args.xmlFile}' does not exist.")
            sys.exit(1)
        xml_file_to_use = args.xmlFile

    moduleTest_path = os.path.dirname(os.path.abspath(__file__))+"/moduleTest.py"

    # Build the command for the moduleTest.py call
    command = [
        "python3", moduleTest_path,
        "--ignoreConnection",
        "-f", xml_file_to_use,
        "-c", args.calibration,
        "--module", "auto",
        "--slot", "-1",
        "--board", "-1",
        "--ignoreConnection",  # This appears twice as in the original script
        "--skipModuleCheck",
        "--vetoFpgaConfig",
        "--version", "local"
    ]

    ## Either -m is used, then a new session will be created
    if args.message and args.message != "-1":
        command.append("--message")
        command.append(args.message)
    ## Or -s is used, then the session will be the one specified
    elif args.session and args.session != "-1":
        command.append("--session")
        command.append(args.session)
    ## Otherwise, the default session1 will be used (for testing)
    else:
        command.append("--session")
        command.append("session1")

    print("Calling:")
    print(" ".join(command))
    print()

    # Execute the command
    subprocess.run(command)

if __name__ == "__main__":
    main()
